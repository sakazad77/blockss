package com.shaik.blockss;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.Paint.Align;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.SoundPool;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.EventLog.Event;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;

@SuppressLint("DrawAllocation")
public class PlayGame extends Activity {

	SquareObject so;
	int[] bingo = { 50, 50, 50 };
	MotionEvent event;
	Canvas c;
	Rect rectt;
	Paint pVal;
	int selectedRecInt;
	int millis = 0;
	int seconds = 0;
	int minutes = 0;
	int fmillis = 0;
	int fseconds = 0;
	int fminutes = 0;
	long startTime = 0;
	long stopTime = 0;
	long elapsedTime = 0;
	long elapsedDuration = 0;
	long pauseTime = 0;
	long resumeTime;
	long timeScore;
	public int jack = 0;
	public int scoreCount = 0;
	public final Rect squares[] = new Rect[36];
	public final Rect squares2[] = new Rect[4];
	public final Rect squares4[] = new Rect[16];
	public final Rect squares8[] = new Rect[64];
	public final int squaresint[] = new int[36];
	public final int squaresint2[] = new int[4];
	public final int squaresint4[] = new int[16];
	public final int squaresint8[] = new int[64];
	public final Paint chosenPaints[] = new Paint[18];
	public final Paint chosenPaints2[] = new Paint[2];
	public final Paint chosenPaints4[] = new Paint[8];
	public final Paint chosenPaints8[] = new Paint[32];
	int xx;
	int selectedValue;
	ArrayList<Integer> al = new ArrayList<Integer>();
	ArrayList<Integer> bl = new ArrayList<Integer>();
	ArrayList<Integer> cl = new ArrayList<Integer>();
	ArrayList<SingleSquare> ssal = new ArrayList<SingleSquare>();
	ArrayList<SingleSquare> ssak = new ArrayList<SingleSquare>();
	public Paint p = new Paint();
	public Paint pFinal = new Paint();
	public final HashMap<Rect, Paint> hm = new HashMap<Rect, Paint>();
	public final HashMap<Integer, Paint> hmint = new HashMap<Integer, Paint>();
	public final HashMap<Integer, Integer> hmCombination = new HashMap<Integer, Integer>();
	int[] values = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
			17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
			34, 35 };
	String[] colorString6by6 = { "#1d1d1d", "#cd66cc", "#6f308a", "#da6927", "#98cde5", "#ff0000", "#c0bc82", 
			"#7f7e80", "#61a547", "#d386b1", "#4578b4", "#e0a02f", "#e8e756", "#ff00ff", "#fff200", 
			"#00ffff", "#b7b7b7", "#0409f7" };
	
	String[] colorString2by2 = { "#1d1d1d", "#cd66cc", "#6f308a", "#da6927" };
	String[] colorString4by4 = {  "#61a547", "#d386b1", "#4578b4", "#e0a02f", "#e8e756",
				"#ff00ff", "#fff200", "#0409f7" };
	String[] colorString8by8 = { };
	
	SoundPool sp;
	int explosion = 0;
	MediaPlayer backgroundScore;
	int difficulty;
	Random rr;
	int music;
	int numberofsquares2, numberofsquares4, numberofsquares6, numberofsquares8;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);

		// Full Screen
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		
		p.setColor(Color.parseColor("#ff6a4f"));
		startTime = System.currentTimeMillis();
		resumeTime = startTime;
		
		
		//Starting BackGround Score and looping
		backgroundScore = MediaPlayer.create(PlayGame.this, R.raw.game);	
		backgroundScore.setLooping(true);
		
		SharedPreferences getPrefs2 = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
		music = getPrefs2.getInt("MusicPreference", 5);
		difficulty = getPrefs2.getInt("DifficultyPreference", 5);
		//edit
		numberofsquares2 = getPrefs2.getInt("NumberOfSquares2", 5);
		numberofsquares4 = getPrefs2.getInt("NumberOfSquares4", 5);
		numberofsquares6 = getPrefs2.getInt("NumberOfSquares6", 5);
		numberofsquares8 = getPrefs2.getInt("NumberOfSquares8", 5);
		
		if(music == 200){	
			backgroundScore.start(); 
		}
		
	    //Creating SoundPool object for bingo state
		sp = new SoundPool(1, AudioManager.STREAM_MUSIC, 0);
		explosion = sp.load(this, R.raw.gunshot, 1);
		
		so = new SquareObject(PlayGame.this);
		setContentView(so);
	}

	public class SquareObject extends View {
		Paint ptext = new Paint();
		Typeface font;
		Random r = new Random();
		Random rr = new Random();

		public SquareObject(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
			font = Typeface.createFromAsset(context.getAssets(),
					"GeosansLight.ttf");
			//p.setColor(Color.parseColor("#ff6a4f"));
			pFinal.setColor(Color.TRANSPARENT);
			int king = 0;
			
			if(numberofsquares6 == 200){
				for (int i = 0; i < chosenPaints.length; i++) {
					Paint paint = new Paint();
					paint.setColor(Color.parseColor(colorString6by6[i]));
					chosenPaints[king++] = paint;
				}
				int queen = 1;
				for (int i = 0; i < squaresint.length; i++) {
					squaresint[i] = queen;
					queen++;
				}
				int m = 0;
				for (int i = 0; i < 36; i++) {
					Integer o = (Integer) m;
					al.add(i, o);
					m = m + 1;
				}
				hiddenPaints(squares, chosenPaints);
			}
			if(numberofsquares2 == 200){
				for (int i = 0; i < chosenPaints2.length; i++) {
					Paint paint = new Paint();
					paint.setColor(Color.parseColor(colorString2by2[i]));
					chosenPaints2[king++] = paint;
				}
				int queen = 1;
				for (int i = 0; i < squaresint2.length; i++) {
					squaresint2[i] = queen;
					queen++;
				}
				int m = 0;
				for (int i = 0; i < 4; i++) {
					Integer o = (Integer) m;
					al.add(i, o);
					m = m + 1;
				}
				hiddenPaints(squares2, chosenPaints2);
			}
			if(numberofsquares4 == 200){
				for (int i = 0; i < chosenPaints4.length; i++) {
					Paint paint = new Paint();
					paint.setColor(Color.parseColor(colorString4by4[i]));
					chosenPaints4[king++] = paint;
				}
				int queen = 1;
				for (int i = 0; i < squaresint4.length; i++) {
					squaresint4[i] = queen;
					queen++;
				}
				int m = 0;
				for (int i = 0; i < 16; i++) {
					Integer o = (Integer) m;
					al.add(i, o);
					m = m + 1;
				}
				hiddenPaints(squares4, chosenPaints4);
			}
			if(numberofsquares8 == 200){
				for (int i = 0; i < chosenPaints8.length; i++) {
					Paint paint = new Paint();
					paint.setColor(Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256)));
					chosenPaints8[king++] = paint;
				}
				int queen = 1;
				for (int i = 0; i < squaresint8.length; i++) {
					squaresint8[i] = queen;
					queen++;
				}
				int m = 0;
				for (int i = 0; i < 64; i++) {
					Integer o = (Integer) m;
					al.add(i, o);
					m = m + 1;
				}
				hiddenPaints(squares8, chosenPaints8);
			}
		}

		@Override
		protected void onDraw(Canvas canvas) {
			// TODO Auto-generated method stub
			super.onDraw(canvas);
			c = canvas;
			
			canvas.drawColor(Color.WHITE);
			ptext.setColor(Color.parseColor("#ff6a4f"));
			ptext.setTextSize(canvas.getWidth() / 13);
			ptext.setTypeface(font);
			ptext.setTextAlign(Align.LEFT);
			float z = ptext.measureText("SCORE:00");
			
			Paint pText2 = new Paint();
			pText2.setColor(Color.parseColor("#ff6a4f"));
			pText2.setTextSize(canvas.getWidth() / 17);
			pText2.setTypeface(font);
			pText2.setTextAlign(Align.LEFT);
			float z1 = pText2.measureText("Tap similar colors hidden underneath");
			float z2 = pText2.measureText("to make them disappear.");
			
			
			//stopTime = System.currentTimeMillis();
			//elapsedTime = stopTime - startTime;
			if(pauseTime != 0){
				//stopTime = System.currentTimeMillis();
				//elapsedTime = elapsedDuration + (stopTime - resumeTime);
				//elapsedTime = (pauseTime - startTime) + (stopTime - resumeTime);
				
				//startTime = resumeTime;
				//pauseTime = 0;
			}
			
				stopTime = System.currentTimeMillis();
				elapsedTime = elapsedDuration + stopTime - startTime;
				millis = (int) elapsedTime;
				seconds = (int) elapsedTime / 1000;
				minutes = (int) seconds / 60;
				millis = millis % 100;
				seconds = seconds % 60;
			
				int b, x, y, c;
				//b = (int) (canvas.getWidth() - canvas.getWidth() / 6) / 11;
				b = (int) ((canvas.getWidth() - canvas.getWidth()/6))/6 ;
				c = (int) b/6;
				x = (int) canvas.getWidth() / 12;
				xx = x;
				//y = (int) (canvas.getHeight() / 2) - (b / 2 + 5 * b);
				y = (int) (canvas.getHeight()/2) - 3*b;
				
				int b2, c2, y2;
				b2 = (int) (canvas.getWidth() - canvas.getWidth()/6)/2;
				c2 = (int) b2/6;
				y2 = (int) (canvas.getHeight()/2 - 1*b2);
				
				int b4, c4, y4;
				b4 = (int) (canvas.getWidth() - canvas.getWidth()/6)/4;
				c4 = (int) b4/6;
				y4 = (int) (canvas.getHeight()/2 - 2*b4);
				
				int b8, c8, y8;
				b8 = (int) (canvas.getWidth() - canvas.getWidth()/6)/8;
				c8 = (int) b8/6;
				y8 = (int) (canvas.getHeight()/2 - 4*b8);
				
				
			canvas.drawText("TIME: " + minutes + ":" + seconds + ":" + millis,
					x + c/2, canvas.getHeight() / 10, ptext);
			canvas.drawText("SCORE: " + scoreCount,
					x + 5 * b + b - c/2 - z,
					canvas.getHeight() / 10, ptext);
			canvas.drawText("Tap similar colors hidden underneath",
					canvas.getWidth()/2 - z1/2,
					y+5*b+b-c + canvas.getHeight()/6, pText2);
			canvas.drawText("to make them disappear.",
					canvas.getWidth()/2 - z2/2,
					y+5*b+b-c + canvas.getHeight()/5 + c/2, pText2);
			
			int k = 0;
			if (jack == 0) {
				
				if(numberofsquares6 == 200){
					for (int i = 0; i < 6; i++) {
						for (int j = 0; j < 6; j++) {
						Rect rectangle = new Rect();
						rectangle.set(x + j * b + c/2, y + i * b, (x + j * b) + b - c + c/2, (y + i * b) + b - c);
						squares[k++] = rectangle;
						}
					}
				}
				if(numberofsquares2 == 200){
					for (int i = 0; i < 2; i++) {
						for (int j = 0; j < 2; j++) {
							Rect rectangle = new Rect();
							rectangle.set(x + j*b2 + c2/2, y2 + i*b2, x + j*b2 + b2 - c2 + c2/2, (y2 + i*b2)+b2 - c2);
							squares2[k++] = rectangle;
						}
					}
				}
				if(numberofsquares4 == 200){
					for (int i = 0; i < 4; i++) {
						for (int j = 0; j < 4; j++) {
							Rect rectangle = new Rect();
							rectangle.set(x+j*b4+c4/2, y4+i*b4, x+j*b4+b4-c4+c4/2, y4+i*b4+b4-c4);
							squares4[k++] = rectangle;
						}
					}
				
					
				}
				if(numberofsquares8 == 200){
					for (int i = 0; i < 8; i++) {
						for (int j = 0; j < 8; j++) {
							Rect rectangle = new Rect();
							rectangle.set(x+j*b8+c8/2, y8+i*b8, x+j*b8+b8-c8+c8/2, y8+i*b8+b8-c8);
							squares8[k++] = rectangle;
						}
					}
				
					
				}
				
				jack = 1;
			}
			if (ssal.size() == 0) {
				if(numberofsquares6 == 200){
					for (int i = 0; i < 36; i++) {
						SingleSquare ss = new SingleSquare(squares[i],
								hmint.get(i), PlayGame.this);
						ssal.add(ss);
					}
				}
				if(numberofsquares2 == 200){
					for (int i = 0; i < 4; i++) {
						SingleSquare ss = new SingleSquare(squares2[i],
								hmint.get(i), PlayGame.this);
						ssal.add(ss);
					}
				}
				if(numberofsquares4 == 200){
					for (int i = 0; i < 16; i++) {
						SingleSquare ss = new SingleSquare(squares4[i],
								hmint.get(i), PlayGame.this);
						ssal.add(ss);
					}
				}
				if(numberofsquares8 == 200){
					for (int i = 0; i < 64; i++) {
						SingleSquare ss = new SingleSquare(squares8[i],
								hmint.get(i), PlayGame.this);
						ssal.add(ss);
					}
				}
			}
			if (ssak.size() == 0) {
				if(numberofsquares6 == 200){
					for (int i = 0; i < 36; i++) {
						if(difficulty == 400){
							Paint paintHard = new Paint();
							paintHard.setColor(Color.rgb(rr.nextInt(256), rr.nextInt(256),
									rr.nextInt(256))); 
						
						SingleSquare ss = new SingleSquare(squares[i], paintHard,
								PlayGame.this);
						ssak.add(ss);
						}else{
							SingleSquare ss = new SingleSquare(squares[i], p,
									PlayGame.this);
							ssak.add(ss);
						}
					}
				}
				if(numberofsquares2 == 200){
					for (int i = 0; i < 4; i++) {
						if(difficulty == 400){
							Paint paintHard = new Paint();
							paintHard.setColor(Color.rgb(rr.nextInt(256), rr.nextInt(256),
									rr.nextInt(256))); 
						
						SingleSquare ss = new SingleSquare(squares2[i], paintHard,
								PlayGame.this);
						ssak.add(ss);
						}else{
							SingleSquare ss = new SingleSquare(squares2[i], p,
									PlayGame.this);
							ssak.add(ss);
						}
					}
				}
				if(numberofsquares4 == 200){
					for (int i = 0; i < 16; i++) {
						if(difficulty == 400){
							Paint paintHard = new Paint();
							paintHard.setColor(Color.rgb(rr.nextInt(256), rr.nextInt(256),
									rr.nextInt(256))); 
						
						SingleSquare ss = new SingleSquare(squares4[i], paintHard,
								PlayGame.this);
						ssak.add(ss);
						}else{
							SingleSquare ss = new SingleSquare(squares4[i], p,
									PlayGame.this);
							ssak.add(ss);
						}
					}
				}
				if(numberofsquares8 == 200){
					for (int i = 0; i < 64; i++) {
						if(difficulty == 400){
							Paint paintHard = new Paint();
							paintHard.setColor(Color.rgb(rr.nextInt(256), rr.nextInt(256),
									rr.nextInt(256))); 
						
						SingleSquare ss = new SingleSquare(squares8[i], paintHard,
								PlayGame.this);
						ssak.add(ss);
						}else{
							SingleSquare ss = new SingleSquare(squares8[i], p,
									PlayGame.this);
							ssak.add(ss);
						}
					}
				}
			}
			if (ssal.size() != 0 && bingo[0] == (int) selectedRecInt) {
				SingleSquare ssaf = ssal.get(selectedRecInt);
				Paint paintf = ssaf.returnPaint();
				Rect rf = ssaf.returnRect();
				canvas.drawRect(rf, paintf);
				if(numberofsquares6 == 200){
					for (int i = 0; i < 36; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						if (i != (int) selectedRecInt)
							canvas.drawRect(rff, paintc);
					}
				}
				if(numberofsquares2 == 200){
					for (int i = 0; i < 4; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						if (i != (int) selectedRecInt)
							canvas.drawRect(rff, paintc);
					}
				}
				if(numberofsquares4 == 200){
					for (int i = 0; i < 16; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						if (i != (int) selectedRecInt)
							canvas.drawRect(rff, paintc);
					}
				}
				if(numberofsquares8 == 200){
					for (int i = 0; i < 64; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						if (i != (int) selectedRecInt)
							canvas.drawRect(rff, paintc);
					}
				}
			} else if (bingo[0] == bingo[1] && bingo[1] != 50 && bingo[0] != 50) {
				SingleSquare ssad = ssak.get(selectedValue);
				SingleSquare ssam = ssal.get(selectedValue);
				// Paint paintd = ssad.returnPaint();
				// Rect rd = ssad.returnRect();
				ssad.setPaint(pFinal);
				ssam.setPaint(pFinal);
				int m = hmCombination.get(selectedValue);
				SingleSquare ssae = ssak.get(m);
				SingleSquare ssan = ssal.get(m);
				// Paint painte = ssad.returnPaint();
				// Rect re = ssad.returnRect();
				ssae.setPaint(pFinal);
				ssan.setPaint(pFinal);
				
				if(numberofsquares6 == 200){
					for (int j = 0; j < 36; j++) {
						SingleSquare ssag = ssak.get(j);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
					}
				}
				if(numberofsquares2 == 200){
					for (int j = 0; j < 4; j++) {
						SingleSquare ssag = ssak.get(j);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
					}
				}
				if(numberofsquares4 == 200){
					for (int j = 0; j < 16; j++) {
						SingleSquare ssag = ssak.get(j);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
					}
				}
				if(numberofsquares8 == 200){
					for (int j = 0; j < 64; j++) {
						SingleSquare ssag = ssak.get(j);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
					}
				}
				if(!cl.contains(bingo[0]) && !cl.contains(hmCombination.get(bingo[0]))){
					cl.add(bingo[0]);
					cl.add(hmCombination.get(bingo[0]));
					scoreCount = scoreCount + 2;
					//Bingo ShotGun sound
					if(music == 200){
					if(explosion != 0)
						sp.play(explosion, 1, 1, 0, 0, 1);
					}
				}
				//scoreCount = scoreCount + 2;
				if(numberofsquares6 == 200){
					if(cl.size() == 36){
						timeScore = elapsedTime;
						fmillis = (int) timeScore;
						fseconds = (int) timeScore / 1000;
						fminutes = (int) fseconds / 60;
						fmillis = fmillis % 100;
						fseconds = fseconds % 60;
						//AlertDialog.Builder alert = new AlertDialog.Builder(
						//		PlayGame.this);
						//alert.setTitle("Time: " + fminutes + ":" + fseconds + ":" + fmillis);
						//alert.show();	
						long timeScored = timeScore;
						Bundle basket = new Bundle();
						basket.putLong("timetaken", timeScored);
						Intent i = new Intent("com.shaik.blockss.SCOREWINDOW");
						i.putExtras(basket);
						startActivity(i);
						//backgroundScore.release();
						finish();
					}
				}
				if(numberofsquares2 == 200){
					if(cl.size() == 4){
						timeScore = elapsedTime;
						fmillis = (int) timeScore;
						fseconds = (int) timeScore / 1000;
						fminutes = (int) fseconds / 60;
						fmillis = fmillis % 100;
						fseconds = fseconds % 60;
						//AlertDialog.Builder alert = new AlertDialog.Builder(
						//		PlayGame.this);
						//alert.setTitle("Time: " + fminutes + ":" + fseconds + ":" + fmillis);
						//alert.show();	
						long timeScored = timeScore;
						Bundle basket = new Bundle();
						basket.putLong("timetaken", timeScored);
						Intent i = new Intent("com.shaik.blockss.SCOREWINDOW");
						i.putExtras(basket);
						startActivity(i);
						//backgroundScore.release();
						finish();
					}
				}
				if(numberofsquares4 == 200){
					if(cl.size() == 16){
						timeScore = elapsedTime;
						fmillis = (int) timeScore;
						fseconds = (int) timeScore / 1000;
						fminutes = (int) fseconds / 60;
						fmillis = fmillis % 100;
						fseconds = fseconds % 60;
						//AlertDialog.Builder alert = new AlertDialog.Builder(
						//		PlayGame.this);
						//alert.setTitle("Time: " + fminutes + ":" + fseconds + ":" + fmillis);
						//alert.show();	
						long timeScored = timeScore;
						Bundle basket = new Bundle();
						basket.putLong("timetaken", timeScored);
						Intent i = new Intent("com.shaik.blockss.SCOREWINDOW");
						i.putExtras(basket);
						startActivity(i);
						//backgroundScore.release();
						finish();
					}
				}
				if(numberofsquares8 == 200){
					if(cl.size() == 64){
						timeScore = elapsedTime;
						fmillis = (int) timeScore;
						fseconds = (int) timeScore / 1000;
						fminutes = (int) fseconds / 60;
						fmillis = fmillis % 100;
						fseconds = fseconds % 60;
						//AlertDialog.Builder alert = new AlertDialog.Builder(
						//		PlayGame.this);
						//alert.setTitle("Time: " + fminutes + ":" + fseconds + ":" + fmillis);
						//alert.show();	
						long timeScored = timeScore;
						Bundle basket = new Bundle();
						basket.putLong("timetaken", timeScored);
						Intent i = new Intent("com.shaik.blockss.SCOREWINDOW");
						i.putExtras(basket);
						startActivity(i);
						//backgroundScore.release();
						finish();
					}
				}
				bingo[0] = 50;
				bingo[1] = 50;
			} else {
				if(numberofsquares6 == 200){
					for (int i = 0; i < 36; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
						// canvas.drawRect(r, p);
					}
				}
				if(numberofsquares2 == 200){
					for (int i = 0; i < 4; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
						// canvas.drawRect(r, p);
					}
				}
				if(numberofsquares4 == 200){
					for (int i = 0; i < 16; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
						// canvas.drawRect(r, p);
					}
				}
				if(numberofsquares8 == 200){
					for (int i = 0; i < 64; i++) {
						SingleSquare ssag = ssak.get(i);
						Rect rff = ssag.returnRect();
						Paint paintc = ssag.returnPaint();
						canvas.drawRect(rff, paintc);
						// canvas.drawRect(r, p);
					}
				}
			}

			invalidate();
			// bingo[0] = 50;
			// bingo[1] = 50;
		}

		public boolean hiddenPaints(Rect[] squares, Paint[] chosenPaints) {
			int count0 = 0;
			int count1 = 0;
			int count2 = 0;
			int count3 = 0;
			int kill = 0;
			Paint selectedPaint = null;
			while (al.size() != 0) {
				int r1 = r.nextInt(al.size());
				int r2 = r.nextInt(al.size());
				if (r1 != r2) {
					// AlertDialog.Builder alert = new AlertDialog.Builder(
					// PlayGame.this); alert.setTitle("hi " + r1 + " "+r2);
					// alert.show();
					Integer x = al.get(r1);
					Integer y = al.get(r2);
					bl.add(x);
					bl.add(y);
					al.remove(x);
					al.remove(y);
					// AlertDialog.Builder alert = new AlertDialog.Builder(
					// PlayGame.this); alert.setTitle("AL size "+ bl.size());
					// alert.show();
				}
			}
			// AlertDialog.Builder alert = new AlertDialog.Builder(
			// PlayGame.this); alert.setTitle("wassup" + bl.get(23) + " mama " +
			// bl.get(24)); alert.show();
			if(numberofsquares6 == 200){
				for (int i = 0; i < 18; i++) {
					selectedPaint = chosenPaints[i];
					int pair1 = bl.get(2 * i);
					int pair2 = bl.get(2 * i + 1);
					hmint.put(pair1, selectedPaint);
					hmint.put(pair2, selectedPaint);
					hmCombination.put(pair1, pair2);
					hmCombination.put(pair2, pair1);
				}
			}
			if(numberofsquares2 == 200){
				for (int i = 0; i < 2; i++) {
					selectedPaint = chosenPaints2[i];
					int pair1 = bl.get(2 * i);
					int pair2 = bl.get(2 * i + 1);
					hmint.put(pair1, selectedPaint);
					hmint.put(pair2, selectedPaint);
					hmCombination.put(pair1, pair2);
					hmCombination.put(pair2, pair1);
				}
			}
			if(numberofsquares4 == 200){
				for (int i = 0; i < 8; i++) {
					selectedPaint = chosenPaints4[i];
					int pair1 = bl.get(2 * i);
					int pair2 = bl.get(2 * i + 1);
					hmint.put(pair1, selectedPaint);
					hmint.put(pair2, selectedPaint);
					hmCombination.put(pair1, pair2);
					hmCombination.put(pair2, pair1);
				}
			}
			if(numberofsquares8 == 200){
				for (int i = 0; i < 32; i++) {
					selectedPaint = chosenPaints8[i];
					int pair1 = bl.get(2 * i);
					int pair2 = bl.get(2 * i + 1);
					hmint.put(pair1, selectedPaint);
					hmint.put(pair2, selectedPaint);
					hmCombination.put(pair1, pair2);
					hmCombination.put(pair2, pair1);
				}
			}
			return true;
		}

	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub

		int act = event.getAction();
		float eventXf = event.getX();
		int eventX = (int) eventXf;
		float eventYf = event.getY();
		int eventY = (int) eventYf;
		
		if(numberofsquares6 == 200){
			for (int i = 0; i < squares.length; i++) {
				int le = squares[i].left;
				int to = squares[i].top;
				int ri = squares[i].right;
				int bo = squares[i].bottom;
				if ((eventX <= ri && eventX >= le)
						&& (eventY >= to && eventY <= bo)) {
					// so.overturnedPaint(squares[i]);
					rectt = squares[i];
					pVal = hmint.get(i);
					if (pVal == null) {
						AlertDialog.Builder alert = new AlertDialog.Builder(
								PlayGame.this);
						alert.setTitle("no paint");
						alert.show();
					}
					// p = pVal;
					int m = hmCombination.get(i);
					selectedRecInt = i;
					break;
				}
			}
	
			int lef = squares[selectedRecInt].left;
			int top = squares[selectedRecInt].top;
			int rig = squares[selectedRecInt].right;
			int bot = squares[selectedRecInt].bottom;
			selectedValue = hmCombination.get(selectedRecInt);
			if ((eventX <= rig && eventX >= lef) && (eventY >= top && eventY <= bot)) {
				if (bingo[0] == 50 && bingo[1] == 50) {
					bingo[0] = (int) selectedRecInt;
					// AlertDialog.Builder alert = new AlertDialog.Builder(
					// PlayGame.this); alert.setTitle("SSAL size "+ ssal.size());
					// alert.show();
				}
				if (bingo[0] != selectedRecInt && bingo[0] != 50 && bingo[1] == 50) {
					bingo[1] = (int) selectedValue;
					if (bingo[0] == bingo[1]) {
						// bingo[2] = 100;
						
					} else {
						bingo[0] = 50;
						bingo[1] = 50;
					}
					// bingo[2] = 50;
				}
			}
		}
		if(numberofsquares2 == 200){
			for (int i = 0; i < squares2.length; i++) {
				int le = squares2[i].left;
				int to = squares2[i].top;
				int ri = squares2[i].right;
				int bo = squares2[i].bottom;
				if ((eventX <= ri && eventX >= le)
						&& (eventY >= to && eventY <= bo)) {
					// so.overturnedPaint(squares[i]);
					rectt = squares2[i];
					pVal = hmint.get(i);
					if (pVal == null) {
						AlertDialog.Builder alert = new AlertDialog.Builder(
								PlayGame.this);
						alert.setTitle("no paint");
						alert.show();
					}
					// p = pVal;
					int m = hmCombination.get(i);
					selectedRecInt = i;
					break;
				}
			}
	
			int lef = squares2[selectedRecInt].left;
			int top = squares2[selectedRecInt].top;
			int rig = squares2[selectedRecInt].right;
			int bot = squares2[selectedRecInt].bottom;
			selectedValue = hmCombination.get(selectedRecInt);
			if ((eventX <= rig && eventX >= lef) && (eventY >= top && eventY <= bot)) {
				if (bingo[0] == 50 && bingo[1] == 50) {
					bingo[0] = (int) selectedRecInt;
					// AlertDialog.Builder alert = new AlertDialog.Builder(
					// PlayGame.this); alert.setTitle("SSAL size "+ ssal.size());
					// alert.show();
				}
				if (bingo[0] != selectedRecInt && bingo[0] != 50 && bingo[1] == 50) {
					bingo[1] = (int) selectedValue;
					if (bingo[0] == bingo[1]) {
						// bingo[2] = 100;
						
					} else {
						bingo[0] = 50;
						bingo[1] = 50;
					}
					// bingo[2] = 50;
				}
			}
		}
		if(numberofsquares4 == 200){
			for (int i = 0; i < squares4.length; i++) {
				int le = squares4[i].left;
				int to = squares4[i].top;
				int ri = squares4[i].right;
				int bo = squares4[i].bottom;
				if ((eventX <= ri && eventX >= le)
						&& (eventY >= to && eventY <= bo)) {
					// so.overturnedPaint(squares[i]);
					rectt = squares4[i];
					pVal = hmint.get(i);
					if (pVal == null) {
						AlertDialog.Builder alert = new AlertDialog.Builder(
								PlayGame.this);
						alert.setTitle("no paint");
						alert.show();
					}
					// p = pVal;
					int m = hmCombination.get(i);
					selectedRecInt = i;
					break;
				}
			}
	
			int lef = squares4[selectedRecInt].left;
			int top = squares4[selectedRecInt].top;
			int rig = squares4[selectedRecInt].right;
			int bot = squares4[selectedRecInt].bottom;
			selectedValue = hmCombination.get(selectedRecInt);
			if ((eventX <= rig && eventX >= lef) && (eventY >= top && eventY <= bot)) {
				if (bingo[0] == 50 && bingo[1] == 50) {
					bingo[0] = (int) selectedRecInt;
					// AlertDialog.Builder alert = new AlertDialog.Builder(
					// PlayGame.this); alert.setTitle("SSAL size "+ ssal.size());
					// alert.show();
				}
				if (bingo[0] != selectedRecInt && bingo[0] != 50 && bingo[1] == 50) {
					bingo[1] = (int) selectedValue;
					if (bingo[0] == bingo[1]) {
						// bingo[2] = 100;
						
					} else {
						bingo[0] = 50;
						bingo[1] = 50;
					}
					// bingo[2] = 50;
				}
			}
		}
		if(numberofsquares8 == 200){
			for (int i = 0; i < squares8.length; i++) {
				int le = squares8[i].left;
				int to = squares8[i].top;
				int ri = squares8[i].right;
				int bo = squares8[i].bottom;
				if ((eventX <= ri && eventX >= le)
						&& (eventY >= to && eventY <= bo)) {
					// so.overturnedPaint(squares[i]);
					rectt = squares8[i];
					pVal = hmint.get(i);
					if (pVal == null) {
						AlertDialog.Builder alert = new AlertDialog.Builder(
								PlayGame.this);
						alert.setTitle("no paint");
						alert.show();
					}
					// p = pVal;
					int m = hmCombination.get(i);
					selectedRecInt = i;
					break;
				}
			}
	
			int lef = squares8[selectedRecInt].left;
			int top = squares8[selectedRecInt].top;
			int rig = squares8[selectedRecInt].right;
			int bot = squares8[selectedRecInt].bottom;
			selectedValue = hmCombination.get(selectedRecInt);
			if ((eventX <= rig && eventX >= lef) && (eventY >= top && eventY <= bot)) {
				if (bingo[0] == 50 && bingo[1] == 50) {
					bingo[0] = (int) selectedRecInt;
					// AlertDialog.Builder alert = new AlertDialog.Builder(
					// PlayGame.this); alert.setTitle("SSAL size "+ ssal.size());
					// alert.show();
				}
				if (bingo[0] != selectedRecInt && bingo[0] != 50 && bingo[1] == 50) {
					bingo[1] = (int) selectedValue;
					if (bingo[0] == bingo[1]) {
						// bingo[2] = 100;
						
					} else {
						bingo[0] = 50;
						bingo[1] = 50;
					}
					// bingo[2] = 50;
				}
			}
		}
		return super.onTouchEvent(event);
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(music == 200)
		backgroundScore.start();
		resumeTime = System.currentTimeMillis();
		startTime = resumeTime;
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		backgroundScore.pause();
		pauseTime = System.currentTimeMillis();
		elapsedDuration = elapsedDuration + pauseTime - resumeTime;
		if(numberofsquares6 == 200){
			if(scoreCount != 36){
				Intent intent=new Intent();
				intent.setClassName(this, "com.shaik.blockss.Pause");
				startActivity(intent);
			}
		}
		if(numberofsquares2 == 200){
			if(scoreCount != 4){
				Intent intent=new Intent();
				intent.setClassName(this, "com.shaik.blockss.Pause");
				startActivity(intent);
			}
		}
		if(numberofsquares4 == 200){
			if(scoreCount != 16){
				Intent intent=new Intent();
				intent.setClassName(this, "com.shaik.blockss.Pause");
				startActivity(intent);
			}
		}
		if(numberofsquares8 == 200){
			if(scoreCount != 64){
				Intent intent=new Intent();
				intent.setClassName(this, "com.shaik.blockss.Pause");
				startActivity(intent);
			}
		}
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == RESULT_OK) {
			Bundle b = data.getExtras();
			int c = b.getInt("answer");
			
		}
	}
	
}
