package com.shaik.blockss;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

@SuppressLint("Instantiatable")
public class DataBase {

	public static final String KEY_ROWID = "_id";
	public static final String KEY_PLAYER_NAME = "player_name";
	public static final String KEY_PLAYER_SCORE = "player_score";
	public static final String KEY_PLAYER_SQUARES = "player_squares";
	
	private static final String DATABASE_NAME = "playerHistory";
	private static final String DATABASE_TABLE = "playerTable";
	private static final int DATABASE_VERSION = 1;

	private DbHelper ourHelper;
	private final Context ourContext;
	private SQLiteDatabase ourDatabase;
	
	
	private static class DbHelper extends SQLiteOpenHelper {

		public DbHelper(Context context) {
			super(context, DATABASE_NAME, null, DATABASE_VERSION);
			// TODO Auto-generated constructor stub
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			// TODO Auto-generated method stub
			db.execSQL("CREATE TABLE " + DATABASE_TABLE + " (" + KEY_ROWID
					+ " INTEGER PRIMARY KEY AUTOINCREMENT, " + KEY_PLAYER_NAME
					+ " TEXT NOT NULL, " + KEY_PLAYER_SCORE 
					+ " TEXT NOT NULL, " + KEY_PLAYER_SQUARES 
					+ " TEXT NOT NULL);");

		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			// TODO Auto-generated method stub
			db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE);
			onCreate(db);
		}
	}
	
	public DataBase(Context c) {
		super();
		ourContext = c;
	}

	
	public DataBase open() throws SQLException{
		ourHelper = new DbHelper(ourContext);
		ourDatabase = ourHelper.getWritableDatabase();
		return this;
	}

	public void close() {
		ourHelper.close();
	}

	public long createEntry(String name, String score, String squares) {
		// TODO Auto-generated method stub
		ContentValues cv = new ContentValues();
		cv.put(KEY_PLAYER_NAME, name);
		cv.put(KEY_PLAYER_SCORE, score);
		cv.put(KEY_PLAYER_SQUARES, squares);
		return ourDatabase.insert(DATABASE_TABLE, null, cv);
	}

	public String getData(){
		String[] columns = new String[]{KEY_ROWID, KEY_PLAYER_NAME, KEY_PLAYER_SCORE, KEY_PLAYER_SQUARES };
		Cursor c = ourDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);
		String result = "";
		
		int iRow = c.getColumnIndex(KEY_ROWID);
		int iName = c.getColumnIndex(KEY_PLAYER_NAME);
		int iScore = c.getColumnIndex(KEY_PLAYER_SCORE);
		int iSquares = c.getColumnIndex(KEY_PLAYER_SQUARES);
		
		
		for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()){
			result = result + "   " + c.getString(iRow) + ". " + c.getString(iName) 
					+ "            " + c.getString(iScore)
					+ "            " + c.getString(iSquares)
					+ "\n" + "\n";
		}
		return result;
	}
	
	public String getScore(long l) throws SQLException{
		// TODO Auto-generated method stub
		String[] columns = new String[]{ KEY_ROWID, KEY_PLAYER_NAME, KEY_PLAYER_SCORE, KEY_PLAYER_SQUARES };
		Cursor c = ourDatabase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" + l, null, null, null, null);
		if(c != null){
			c.moveToFirst();
			String score = c.getString(2);
			return score;
		}
		return null;
	}
	public String getSquares(long l) throws SQLException{
		// TODO Auto-generated method stub
		String[] columns = new String[]{ KEY_ROWID, KEY_PLAYER_NAME, KEY_PLAYER_SCORE, KEY_PLAYER_SQUARES };
		Cursor c = ourDatabase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" + l, null, null, null, null);
		if(c != null){
			c.moveToFirst();
			String squares = c.getString(3);
			return squares;
		}
		return null;
	}
	
	public String getNumber() throws SQLException{
		String[] columns = new String[]{ KEY_ROWID, KEY_PLAYER_NAME, KEY_PLAYER_SCORE, KEY_PLAYER_SQUARES };
		Cursor c = ourDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);
		String result = "";
		//int iRow = c.getColumnIndex(KEY_ROWID);
		for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()){
			if(c != null){
				int iRow = c.getColumnIndex(KEY_ROWID);
				result = c.getString(iRow);
			}
			//if(iRow > 0){
			//result = c.getString(iRow);
			//}
		}
		if(result.length() != 0){
			return result;
		}else{
			return "";
		}
	}
}
